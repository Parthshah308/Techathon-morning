{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\vercel1\\\\vercel1\\\\components\\\\post\\\\add-comment\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { FetchContext } from '../../../store/fetch';\nimport TextArea from '../../textarea';\nimport Button from '../../button';\nimport styles from './add-comment.module.css';\n\nconst AddComment = ({\n  questionId,\n  answerId,\n  setShowAddComment,\n  setQuestion\n}) => {\n  const {\n    authAxios\n  } = useContext(FetchContext);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  return __jsx(Formik, {\n    initialValues: {\n      comment: ''\n    },\n    onSubmit: async (values, {\n      setStatus,\n      resetForm\n    }) => {\n      setLoading(true);\n\n      try {\n        const {\n          data\n        } = await authAxios.post(`/comment/${questionId}/${answerId ? answerId : ''}`, values);\n        setQuestion(data);\n        resetForm({});\n        setShowAddComment(false);\n      } catch (error) {\n        setStatus(error.response.data.message);\n      }\n\n      setLoading(false);\n    },\n    validationSchema: Yup.object({\n      comment: Yup.string().required('Comment is missing.').min(5, 'Comment must be at least 5 characters.').max(1000, 'Comment cannot be longer than 1000 characters.')\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, ({\n    values,\n    errors,\n    touched,\n    status,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting\n  }) => __jsx(\"form\", {\n    className: styles.container,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, __jsx(TextArea, {\n    name: \"comment\",\n    autoComplete: \"off\",\n    value: values.comment,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    hasError: touched.comment && errors.comment,\n    errorMessage: errors.comment && errors.comment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }), __jsx(\"p\", {\n    className: styles.status,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, status), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    className: styles.button,\n    type: \"submit\",\n    primary: true,\n    isLoading: loading,\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, \"Add Comment\"))));\n};\n\nexport default AddComment;","map":{"version":3,"sources":["C:/Users/HP/OneDrive/Documents/vercel1/vercel1/components/post/add-comment/index.js"],"names":["React","useState","useContext","Formik","Yup","FetchContext","TextArea","Button","styles","AddComment","questionId","answerId","setShowAddComment","setQuestion","authAxios","loading","setLoading","comment","values","setStatus","resetForm","data","post","error","response","message","object","string","required","min","max","errors","touched","status","handleChange","handleBlur","handleSubmit","isSubmitting","container","button"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\nimport { Formik } from 'formik'\nimport * as Yup from 'yup'\n\nimport { FetchContext } from '../../../store/fetch'\n\nimport TextArea from '../../textarea'\nimport Button from '../../button'\n\nimport styles from './add-comment.module.css'\n\nconst AddComment = ({\n  questionId,\n  answerId,\n  setShowAddComment,\n  setQuestion\n}) => {\n  const { authAxios } = useContext(FetchContext)\n\n  const [loading, setLoading] = useState(false)\n\n  return (\n    <Formik\n      initialValues={{ comment: '' }}\n      onSubmit={async (values, { setStatus, resetForm }) => {\n        setLoading(true)\n        try {\n          const { data } = await authAxios.post(\n            `/comment/${questionId}/${answerId ? answerId : ''}`,\n            values\n          )\n\n          setQuestion(data)\n\n          resetForm({})\n          setShowAddComment(false)\n        } catch (error) {\n          setStatus(error.response.data.message)\n        }\n        setLoading(false)\n      }}\n      validationSchema={Yup.object({\n        comment: Yup.string()\n          .required('Comment is missing.')\n          .min(5, 'Comment must be at least 5 characters.')\n          .max(1000, 'Comment cannot be longer than 1000 characters.')\n      })}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        status,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting\n      }) => (\n        <form className={styles.container} onSubmit={handleSubmit}>\n          <TextArea\n            name=\"comment\"\n            autoComplete=\"off\"\n            value={values.comment}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            hasError={touched.comment && errors.comment}\n            errorMessage={errors.comment && errors.comment}\n          />\n          <p className={styles.status}>{status}</p>\n          <div>\n            <Button\n              className={styles.button}\n              type=\"submit\"\n              primary\n              isLoading={loading}\n              disabled={isSubmitting}\n            >\n              Add Comment\n            </Button>\n          </div>\n        </form>\n      )}\n    </Formik>\n  )\n}\n\nexport default AddComment\n"]},"metadata":{},"sourceType":"module"}
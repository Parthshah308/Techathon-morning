{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\takecode_vercel-master\\\\takecode_vercel-master\\\\pages\\\\Question\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { publicFetch } from '../../util/fetcher';\nimport Layout from '../../components/layout';\nimport MUIDataTable from \"mui-datatables\";\n\nvar Question = function Question() {\n  _s();\n\n  var router = useRouter();\n  var columns = [\"Name\", \"Company\", \"City\", \"State\"];\n  var data = [[\"Joe James\", \"Test Corp\", \"Yonkers\", \"NY\"], [\"John Walsh\", \"Test Corp\", \"Hartford\", \"CT\"], [\"Bob Herm\", \"Test Corp\", \"Tampa\", \"FL\"], [\"James Houston\", \"Test Corp\", \"Dallas\", \"TX\"]];\n  var options = {\n    filterType: 'checkbox'\n  };\n\n  var _useState = useState(null),\n      questions = _useState[0],\n      setQuestions = _useState[1];\n\n  var _useState2 = useState('Votes'),\n      sortType = _useState2[0],\n      setSortType = _useState2[1];\n\n  useEffect(function () {\n    var fetchQuestion = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$publicFetch$ge, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return publicFetch.get('/question');\n\n              case 2:\n                _yield$publicFetch$ge = _context.sent;\n                data = _yield$publicFetch$ge.data;\n                setQuestions(data);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchQuestion() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    var fetchQuestionByTag = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _yield$publicFetch$ge2, data;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return publicFetch.get(\"/questions/\".concat(router.query.tag));\n\n              case 2:\n                _yield$publicFetch$ge2 = _context2.sent;\n                data = _yield$publicFetch$ge2.data;\n                setQuestions(data);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function fetchQuestionByTag() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    if (router.query.tag) {\n      fetchQuestionByTag();\n    } else {\n      fetchQuestion();\n    }\n  }, [router.query.tag]);\n\n  var handleSorting = function handleSorting() {\n    switch (sortType) {\n      case 'Votes':\n        return function (a, b) {\n          return b.score - a.score;\n        };\n\n      case 'Views':\n        return function (a, b) {\n          return b.views - a.views;\n        };\n\n      case 'Newest':\n        return function (a, b) {\n          return new Date(b.created) - new Date(a.created);\n        };\n\n      case 'Oldest':\n        return function (a, b) {\n          return new Date(a.created) - new Date(b.created);\n        };\n\n      default:\n        break;\n    }\n  };\n\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, router.query.tag ? router.query.tag : 'Questions', \" - TakeCode\")), __jsx(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, \"All Questions\"));\n};\n\n_s(Question, \"XcfFrNqanLVIH4XtjJXvyZw61w0=\", false, function () {\n  return [useRouter];\n});\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["C:/Users/HP/OneDrive/Documents/takecode_vercel-master/takecode_vercel-master/pages/Question/index.js"],"names":["React","useState","useEffect","Head","useRouter","publicFetch","Layout","MUIDataTable","Question","router","columns","data","options","filterType","questions","setQuestions","sortType","setSortType","fetchQuestion","get","fetchQuestionByTag","query","tag","handleSorting","a","b","score","views","Date","created"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Head from 'next/head'\r\nimport { useRouter } from 'next/router'\r\nimport { publicFetch } from '../../util/fetcher'\r\nimport Layout from '../../components/layout'\r\nimport MUIDataTable from \"mui-datatables\";\r\n\r\nconst Question = () => {\r\n  const router = useRouter()\r\n  const columns = [\"Name\", \"Company\", \"City\", \"State\"];\r\n \r\n  const data = [\r\n   [\"Joe James\", \"Test Corp\", \"Yonkers\", \"NY\"],\r\n   [\"John Walsh\", \"Test Corp\", \"Hartford\", \"CT\"],\r\n   [\"Bob Herm\", \"Test Corp\", \"Tampa\", \"FL\"],\r\n   [\"James Houston\", \"Test Corp\", \"Dallas\", \"TX\"],\r\n  ];\r\n   \r\n  const options = {\r\n    filterType: 'checkbox',\r\n  };\r\n  const [questions, setQuestions] = useState(null)\r\n  const [sortType, setSortType] = useState('Votes')\r\n\r\n  useEffect(() => {\r\n    const fetchQuestion = async () => {\r\n      const { data } = await publicFetch.get('/question')\r\n      setQuestions(data)\r\n    }\r\n\r\n    const fetchQuestionByTag = async () => {\r\n      const { data } = await publicFetch.get(`/questions/${router.query.tag}`)\r\n      setQuestions(data)\r\n    }\r\n\r\n    if (router.query.tag) {\r\n      fetchQuestionByTag()\r\n    } else {\r\n      fetchQuestion()\r\n    }\r\n  }, [router.query.tag])\r\n\r\n  const handleSorting = () => {\r\n    switch (sortType) {\r\n      case 'Votes':\r\n        return (a, b) => b.score - a.score\r\n      case 'Views':\r\n        return (a, b) => b.views - a.views\r\n      case 'Newest':\r\n        return (a, b) => new Date(b.created) - new Date(a.created)\r\n      case 'Oldest':\r\n        return (a, b) => new Date(a.created) - new Date(b.created)\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Head>\r\n        <title>\r\n          {router.query.tag ? router.query.tag : 'Questions'} - TakeCode\r\n        </title>\r\n      </Head>\r\n        <h2>All Questions</h2>\r\n       \r\n        {/* <MUIDataTable \r\n  title={\"Employee List\"} \r\n  data={data} \r\n  columns={columns} \r\n  options={options} \r\n/> */}\r\n    \r\n\r\n    </Layout>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default Question;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\vercel1\\\\vercel1\\\\components\\\\add-answer\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport Link from 'next/link';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { FetchContext } from '../../store/fetch';\nimport { AuthContext } from '../../store/auth';\nimport ModalContext from '../../store/modal';\nimport TextArea from '../textarea';\nimport Button from '../button';\nimport Tag from '../tag';\nimport styles from './add-answer.module.css';\n\nconst AddAnswer = ({\n  id,\n  tags,\n  setQuestion\n}) => {\n  const {\n    authAxios\n  } = useContext(FetchContext);\n  const {\n    isAuthenticated\n  } = useContext(AuthContext);\n  const {\n    handleComponentVisible\n  } = useContext(ModalContext);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  return __jsx(Formik, {\n    initialValues: {\n      text: ''\n    },\n    onSubmit: async (values, {\n      setStatus,\n      resetForm\n    }) => {\n      setLoading(true);\n\n      try {\n        const {\n          data\n        } = await authAxios.post(`/answer/${id}`, values);\n        setQuestion(data);\n        resetForm({});\n      } catch (error) {\n        setStatus(error.response.data.message);\n      }\n\n      setLoading(false);\n    },\n    validationSchema: Yup.object({\n      text: Yup.string().required('Body is missing.').min(30, 'Body must be at least 30 characters.').max(30000, 'Body cannot be longer than 30000 characters.')\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, ({\n    values,\n    errors,\n    touched,\n    status,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting\n  }) => __jsx(\"form\", {\n    className: styles.container,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, \"Your answer\"), __jsx(TextArea, {\n    name: \"text\",\n    autoComplete: \"off\",\n    value: values.text,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    hasError: touched.text && errors.text,\n    errorMessage: errors.text && errors.text,\n    className: styles.textarea,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }), __jsx(\"p\", {\n    className: styles.status,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, status), __jsx(\"div\", {\n    className: styles.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    type: \"submit\",\n    primary: true,\n    isLoading: loading,\n    disabled: isSubmitting,\n    onClick: () => !isAuthenticated() && handleComponentVisible(true, 'signup'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, \"Post Your Answer\")), __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, \"Browse other questions tagged \\xA0\", tags.map(tag => __jsx(Tag, {\n    key: tag,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, tag)), \"or \\xA0\", __jsx(Link, {\n    href: \"/questions/ask\",\n    as: \"/questions/ask\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }, \"ask your own question.\")))));\n};\n\nexport default AddAnswer;","map":{"version":3,"sources":["C:/Users/HP/OneDrive/Documents/vercel1/vercel1/components/add-answer/index.js"],"names":["React","useState","useContext","Link","Formik","Yup","FetchContext","AuthContext","ModalContext","TextArea","Button","Tag","styles","AddAnswer","id","tags","setQuestion","authAxios","isAuthenticated","handleComponentVisible","loading","setLoading","text","values","setStatus","resetForm","data","post","error","response","message","object","string","required","min","max","errors","touched","status","handleChange","handleBlur","handleSubmit","isSubmitting","container","textarea","button","map","tag"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\nimport Link from 'next/link'\nimport { Formik } from 'formik'\nimport * as Yup from 'yup'\n\nimport { FetchContext } from '../../store/fetch'\nimport { AuthContext } from '../../store/auth'\nimport ModalContext from '../../store/modal'\n\nimport TextArea from '../textarea'\nimport Button from '../button'\nimport Tag from '../tag'\n\nimport styles from './add-answer.module.css'\n\nconst AddAnswer = ({ id, tags, setQuestion }) => {\n  const { authAxios } = useContext(FetchContext)\n  const { isAuthenticated } = useContext(AuthContext)\n  const { handleComponentVisible } = useContext(ModalContext)\n\n  const [loading, setLoading] = useState(false)\n\n  return (\n    <Formik\n      initialValues={{ text: '' }}\n      onSubmit={async (values, { setStatus, resetForm }) => {\n        setLoading(true)\n        try {\n          const { data } = await authAxios.post(`/answer/${id}`, values)\n          setQuestion(data)\n          resetForm({})\n        } catch (error) {\n          setStatus(error.response.data.message)\n        }\n        setLoading(false)\n      }}\n      validationSchema={Yup.object({\n        text: Yup.string()\n          .required('Body is missing.')\n          .min(30, 'Body must be at least 30 characters.')\n          .max(30000, 'Body cannot be longer than 30000 characters.')\n      })}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        status,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form className={styles.container} onSubmit={handleSubmit}>\n          <h2>Your answer</h2>\n          <TextArea\n            name=\"text\"\n            autoComplete=\"off\"\n            value={values.text}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            hasError={touched.text && errors.text}\n            errorMessage={errors.text && errors.text}\n            className={styles.textarea}\n          />\n          <p className={styles.status}>{status}</p>\n          <div className={styles.button}>\n            <Button\n              type=\"submit\"\n              primary\n              isLoading={loading}\n              disabled={isSubmitting}\n              onClick={() => !isAuthenticated() && handleComponentVisible(true, 'signup')}\n            >\n              Post Your Answer\n            </Button>\n          </div>\n          <h3>\n            Browse other questions tagged &nbsp;\n            {tags.map((tag) => (\n              <Tag key={tag}>{tag}</Tag>\n            ))}\n            or &nbsp;\n            <Link href=\"/questions/ask\" as=\"/questions/ask\">\n              <a>ask your own question.</a>\n            </Link>\n          </h3>\n        </form>\n      )}\n    </Formik>\n  )\n}\n\nexport default AddAnswer\n"]},"metadata":{},"sourceType":"module"}
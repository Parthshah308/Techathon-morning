{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\vercel1\\\\vercel1\\\\pages\\\\questions\\\\[slug].js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport { publicFetch } from '../../util/fetcher';\nimport Layout from '../../components/layout';\nimport PageTitle from '../../components/page-title';\nimport DetailPageContainer from '../../components/detail-page-container';\nimport PostWrapper from '../../components/post/post-wrapper';\nimport PostVote from '../../components/post/post-vote';\nimport PostSummary from '../../components/post/post-summary';\nimport CommentList from '../../components/post/comment-list';\nimport CommentItem from '../../components/post/comment-list/comment-item';\nimport AnswerContainer from '../../components/answer-container';\nimport AddAnswer from '../../components/add-answer';\nimport { Spinner } from '../../components/icons';\n\nvar QuestionDetail = function QuestionDetail(_ref) {\n  _s();\n\n  var questionId = _ref.questionId,\n      title = _ref.title;\n\n  var _useState = useState(null),\n      question = _useState[0],\n      setQuestion = _useState[1];\n\n  var _useState2 = useState('Votes'),\n      answerSortType = _useState2[0],\n      setAnswersSortType = _useState2[1];\n\n  useEffect(function () {\n    var fetchQuestion = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$publicFetch$ge, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return publicFetch.get(\"/question/\".concat(questionId));\n\n              case 2:\n                _yield$publicFetch$ge = _context.sent;\n                data = _yield$publicFetch$ge.data;\n                setQuestion(data);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchQuestion() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    fetchQuestion();\n  }, []);\n\n  var handleSorting = function handleSorting() {\n    switch (answerSortType) {\n      case 'Votes':\n        return function (a, b) {\n          return b.score - a.score;\n        };\n\n      case 'Newest':\n        return function (a, b) {\n          return new Date(b.created) - new Date(a.created);\n        };\n\n      case 'Oldest':\n        return function (a, b) {\n          return new Date(a.created) - new Date(b.created);\n        };\n\n      default:\n        break;\n    }\n  };\n\n  var isClient = true;\n  return __jsx(Layout, {\n    extra: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, title), __jsx(\"link\", {\n    rel: \"canonical\",\n    href: isClient && window.location.href,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  })), __jsx(PageTitle, {\n    title: title,\n    button: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), __jsx(DetailPageContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, !question && __jsx(\"div\", {\n    className: \"loading\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, __jsx(Spinner, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  })), question && __jsx(React.Fragment, null, __jsx(PostWrapper, {\n    borderBottom: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, __jsx(PostVote, {\n    score: question.score,\n    votes: question.votes,\n    questionId: questionId,\n    setQuestion: setQuestion,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  }), __jsx(PostSummary, {\n    tags: question.tags,\n    author: question.author,\n    created: question.created,\n    questionId: questionId,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }, question.text), __jsx(CommentList, {\n    questionId: questionId,\n    setQuestion: setQuestion,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  }, question.comments.map(function (_ref3) {\n    var id = _ref3.id,\n        author = _ref3.author,\n        created = _ref3.created,\n        body = _ref3.body;\n    return __jsx(CommentItem, {\n      key: id,\n      commentId: id,\n      questionId: questionId,\n      author: author.username,\n      isOwner: author.username === question.author.username,\n      created: created,\n      setQuestion: setQuestion,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 19\n      }\n    }, body);\n  }))), question.answers.length > 0 && __jsx(AnswerContainer, {\n    answersCount: question.answers.length,\n    answerSortType: answerSortType,\n    setAnswerSortType: setAnswersSortType,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, question.answers.sort(handleSorting()).map(function (answer) {\n    return __jsx(PostWrapper, {\n      key: answer.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 19\n      }\n    }, __jsx(PostVote, {\n      score: answer.score,\n      votes: answer.votes,\n      answerId: answer.id,\n      questionId: questionId,\n      setQuestion: setQuestion,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }\n    }), __jsx(PostSummary, {\n      author: answer.author,\n      created: answer.created,\n      questionId: questionId,\n      answerId: answer.id,\n      setQuestion: setQuestion,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }, answer.text), __jsx(CommentList, {\n      questionId: questionId,\n      answerId: answer.id,\n      setQuestion: setQuestion,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    }, answer.comments.map(function (_ref4) {\n      var id = _ref4.id,\n          author = _ref4.author,\n          created = _ref4.created,\n          body = _ref4.body;\n      return __jsx(CommentItem, {\n        key: id,\n        commentId: id,\n        questionId: questionId,\n        answerId: answer.id,\n        author: author.username,\n        isOwner: author.username === question.author.username,\n        created: created,\n        setQuestion: setQuestion,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 25\n        }\n      }, body);\n    })));\n  })), __jsx(AddAnswer, {\n    tags: question.tags,\n    id: questionId,\n    setQuestion: setQuestion,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }))));\n};\n\n_s(QuestionDetail, \"hkNSRtGMzMehBBAzYtk5qbqsy4U=\");\n\n_c = QuestionDetail;\nexport var __N_SSP = true;\nexport default QuestionDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionDetail\");","map":{"version":3,"sources":["C:/Users/HP/OneDrive/Documents/vercel1/vercel1/pages/questions/[slug].js"],"names":["React","useEffect","useState","Head","publicFetch","Layout","PageTitle","DetailPageContainer","PostWrapper","PostVote","PostSummary","CommentList","CommentItem","AnswerContainer","AddAnswer","Spinner","QuestionDetail","questionId","title","question","setQuestion","answerSortType","setAnswersSortType","fetchQuestion","get","data","handleSorting","a","b","score","Date","created","isClient","window","location","href","votes","tags","author","text","comments","map","id","body","username","answers","length","sort","answer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Head from 'next/head'\n\nimport { publicFetch } from '../../util/fetcher'\n\nimport Layout from '../../components/layout'\nimport PageTitle from '../../components/page-title'\nimport DetailPageContainer from '../../components/detail-page-container'\nimport PostWrapper from '../../components/post/post-wrapper'\nimport PostVote from '../../components/post/post-vote'\nimport PostSummary from '../../components/post/post-summary'\nimport CommentList from '../../components/post/comment-list'\nimport CommentItem from '../../components/post/comment-list/comment-item'\nimport AnswerContainer from '../../components/answer-container'\nimport AddAnswer from '../../components/add-answer'\nimport { Spinner } from '../../components/icons'\n\nconst QuestionDetail = ({ questionId, title }) => {\n  const [question, setQuestion] = useState(null)\n  const [answerSortType, setAnswersSortType] = useState('Votes')\n\n  useEffect(() => {\n    const fetchQuestion = async () => {\n      const { data } = await publicFetch.get(`/question/${questionId}`)\n      setQuestion(data)\n    }\n\n    fetchQuestion()\n  }, [])\n\n  const handleSorting = () => {\n    switch (answerSortType) {\n      case 'Votes':\n        return (a, b) => b.score - a.score\n      case 'Newest':\n        return (a, b) => new Date(b.created) - new Date(a.created)\n      case 'Oldest':\n        return (a, b) => new Date(a.created) - new Date(b.created)\n      default:\n        break\n    }\n  }\n\n  const isClient = typeof window === 'object'\n\n  return (\n    <Layout extra={false}>\n      <Head>\n        <title>{title}</title>\n        <link rel=\"canonical\" href={isClient && window.location.href}></link>\n      </Head>\n\n      <PageTitle title={title} button />\n\n      <DetailPageContainer>\n        {!question && (\n          <div className=\"loading\">\n            <Spinner />\n          </div>\n        )}\n\n        {question && (\n          <>\n            <PostWrapper borderBottom={false}>\n              <PostVote\n                score={question.score}\n                votes={question.votes}\n                questionId={questionId}\n                setQuestion={setQuestion}\n              />\n              <PostSummary\n                tags={question.tags}\n                author={question.author}\n                created={question.created}\n                questionId={questionId}\n              >\n                {question.text}\n              </PostSummary>\n              <CommentList questionId={questionId} setQuestion={setQuestion}>\n                {question.comments.map(({ id, author, created, body }) => (\n                  <CommentItem\n                    key={id}\n                    commentId={id}\n                    questionId={questionId}\n                    author={author.username}\n                    isOwner={author.username === question.author.username}\n                    created={created}\n                    setQuestion={setQuestion}\n                  >\n                    {body}\n                  </CommentItem>\n                ))}\n              </CommentList>\n            </PostWrapper>\n              \n            {question.answers.length > 0 && (\n              <AnswerContainer\n                answersCount={question.answers.length}\n                answerSortType={answerSortType}\n                setAnswerSortType={setAnswersSortType}\n              >\n                {question.answers.sort(handleSorting()).map((answer) => (\n                  <PostWrapper key={answer.id}>\n                    <PostVote\n                      score={answer.score}\n                      votes={answer.votes}\n                      answerId={answer.id}\n                      questionId={questionId}\n                      setQuestion={setQuestion}\n                    />\n                    <PostSummary\n                      author={answer.author}\n                      created={answer.created}\n                      questionId={questionId}\n                      answerId={answer.id}\n                      setQuestion={setQuestion}\n                    >\n                      {answer.text}\n                    </PostSummary>\n                    <CommentList\n                      questionId={questionId}\n                      answerId={answer.id}\n                      setQuestion={setQuestion}\n                    >\n                      {answer.comments.map(({ id, author, created, body }) => (\n                        <CommentItem\n                          key={id}\n                          commentId={id}\n                          questionId={questionId}\n                          answerId={answer.id}\n                          author={author.username}\n                          isOwner={author.username === question.author.username}\n                          created={created}\n                          setQuestion={setQuestion}\n                        >\n                          {body}\n                        </CommentItem>\n                      ))}\n                    </CommentList>\n                  </PostWrapper>\n                ))}\n              </AnswerContainer>\n            )}\n\n            <AddAnswer\n              tags={question.tags}\n              id={questionId}\n              setQuestion={setQuestion}\n            />\n          </>\n        )}\n      </DetailPageContainer>\n    </Layout>\n  )\n}\n\nexport async function getServerSideProps(context) {\n  const slug = context.params.slug\n  const questionId = slug.split('-').shift()\n  const title = slug\n    ?.substr(slug.indexOf('-') + 1)\n    .split('-')\n    .join(' ')\n\n  return {\n    props: {\n      questionId,\n      title\n    }\n  }\n}\n\nexport default QuestionDetail\n"]},"metadata":{},"sourceType":"module"}
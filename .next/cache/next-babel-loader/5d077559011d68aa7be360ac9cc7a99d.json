{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\takecode_vercel-master\\\\takecode_vercel-master\\\\pages\\\\Question\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { publicFetch } from '../../util/fetcher';\nimport Layout from '../../components/layout';\nimport MUIDataTable from \"mui-datatables\";\n\nconst Question = () => {\n  const router = useRouter();\n  const columns = [\"Name\", \"Company\", \"City\", \"State\"];\n  const data = [[\"Joe James\", \"Test Corp\", \"Yonkers\", \"NY\"], [\"John Walsh\", \"Test Corp\", \"Hartford\", \"CT\"], [\"Bob Herm\", \"Test Corp\", \"Tampa\", \"FL\"], [\"James Houston\", \"Test Corp\", \"Dallas\", \"TX\"]];\n  const options = {\n    filterType: 'checkbox'\n  };\n  const {\n    0: questions,\n    1: setQuestions\n  } = useState(null);\n  const {\n    0: sortType,\n    1: setSortType\n  } = useState('Votes');\n  useEffect(() => {\n    const fetchQuestion = async () => {\n      const {\n        data\n      } = await publicFetch.get('/question');\n      setQuestions(data);\n    };\n\n    const fetchQuestionByTag = async () => {\n      const {\n        data\n      } = await publicFetch.get(`/questions/${router.query.tag}`);\n      setQuestions(data);\n    };\n\n    if (router.query.tag) {\n      fetchQuestionByTag();\n    } else {\n      fetchQuestion();\n    }\n  }, [router.query.tag]);\n\n  const handleSorting = () => {\n    switch (sortType) {\n      case 'Votes':\n        return (a, b) => b.score - a.score;\n\n      case 'Views':\n        return (a, b) => b.views - a.views;\n\n      case 'Newest':\n        return (a, b) => new Date(b.created) - new Date(a.created);\n\n      case 'Oldest':\n        return (a, b) => new Date(a.created) - new Date(b.created);\n\n      default:\n        break;\n    }\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, router.query.tag ? router.query.tag : 'Questions', \" - TakeCode\")), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, \"All Questions\"));\n};\n\nexport default Question;","map":{"version":3,"sources":["C:/Users/HP/OneDrive/Documents/takecode_vercel-master/takecode_vercel-master/pages/Question/index.js"],"names":["React","useState","useEffect","Head","useRouter","publicFetch","Layout","MUIDataTable","Question","router","columns","data","options","filterType","questions","setQuestions","sortType","setSortType","fetchQuestion","get","fetchQuestionByTag","query","tag","handleSorting","a","b","score","views","Date","created"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Head from 'next/head'\r\nimport { useRouter } from 'next/router'\r\nimport { publicFetch } from '../../util/fetcher'\r\nimport Layout from '../../components/layout'\r\nimport MUIDataTable from \"mui-datatables\";\r\n\r\nconst Question = () => {\r\n  const router = useRouter()\r\n  const columns = [\"Name\", \"Company\", \"City\", \"State\"];\r\n \r\n  const data = [\r\n   [\"Joe James\", \"Test Corp\", \"Yonkers\", \"NY\"],\r\n   [\"John Walsh\", \"Test Corp\", \"Hartford\", \"CT\"],\r\n   [\"Bob Herm\", \"Test Corp\", \"Tampa\", \"FL\"],\r\n   [\"James Houston\", \"Test Corp\", \"Dallas\", \"TX\"],\r\n  ];\r\n   \r\n  const options = {\r\n    filterType: 'checkbox',\r\n  };\r\n  const [questions, setQuestions] = useState(null)\r\n  const [sortType, setSortType] = useState('Votes')\r\n\r\n  useEffect(() => {\r\n    const fetchQuestion = async () => {\r\n      const { data } = await publicFetch.get('/question')\r\n      setQuestions(data)\r\n    }\r\n\r\n    const fetchQuestionByTag = async () => {\r\n      const { data } = await publicFetch.get(`/questions/${router.query.tag}`)\r\n      setQuestions(data)\r\n    }\r\n\r\n    if (router.query.tag) {\r\n      fetchQuestionByTag()\r\n    } else {\r\n      fetchQuestion()\r\n    }\r\n  }, [router.query.tag])\r\n\r\n  const handleSorting = () => {\r\n    switch (sortType) {\r\n      case 'Votes':\r\n        return (a, b) => b.score - a.score\r\n      case 'Views':\r\n        return (a, b) => b.views - a.views\r\n      case 'Newest':\r\n        return (a, b) => new Date(b.created) - new Date(a.created)\r\n      case 'Oldest':\r\n        return (a, b) => new Date(a.created) - new Date(b.created)\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Head>\r\n        <title>\r\n          {router.query.tag ? router.query.tag : 'Questions'} - TakeCode\r\n        </title>\r\n      </Head>\r\n        <h2>All Questions</h2>\r\n       \r\n        {/* <MUIDataTable \r\n  title={\"Employee List\"} \r\n  data={data} \r\n  columns={columns} \r\n  options={options} \r\n/> */}\r\n    \r\n\r\n    </Layout>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default Question;"]},"metadata":{},"sourceType":"module"}
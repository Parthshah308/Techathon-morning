{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\vercel1\\\\vercel1\\\\pages\\\\Question\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useContext } from 'react';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { publicFetch } from '../../util/fetcher';\nimport { AuthContext } from '../../store/auth';\nimport Layout from '../../components/layout';\nimport QuestionWrapper from '../../components/question/question-wrapper';\nimport QuestionStats from '../../components/question/question-stats';\nimport QuestionSummary from '../../components/question/question-summary';\nimport PageTitle from '../../components/page-title';\nimport ButtonGroup from '../../components/button-group';\nimport { Spinner } from '../../components/icons';\n\nvar HomePage = function HomePage() {\n  _s();\n\n  var _Approved;\n\n  var router = useRouter();\n\n  var _useContext = useContext(AuthContext),\n      isAuthenticated = _useContext.isAuthenticated,\n      isAdmin = _useContext.isAdmin;\n\n  var _useState = useState(null),\n      questions = _useState[0],\n      setQuestions = _useState[1];\n\n  var _useState2 = useState('Votes'),\n      sortType = _useState2[0],\n      setSortType = _useState2[1];\n\n  useEffect(function () {\n    var fetchQuestion = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$publicFetch$ge, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return publicFetch.get('/question');\n\n              case 2:\n                _yield$publicFetch$ge = _context.sent;\n                data = _yield$publicFetch$ge.data;\n                setQuestions(data);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchQuestion() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    var fetchQuestionByTag = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _yield$publicFetch$ge2, data;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return publicFetch.get(\"/questions/\".concat(router.query.tag));\n\n              case 2:\n                _yield$publicFetch$ge2 = _context2.sent;\n                data = _yield$publicFetch$ge2.data;\n                setQuestions(data.status == \"Approved\");\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function fetchQuestionByTag() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    if (router.query.tag) {\n      fetchQuestionByTag();\n    } else {\n      fetchQuestion();\n    }\n  }, [router.query.tag]);\n\n  var handleSorting = function handleSorting() {\n    switch (sortType) {\n      case 'Votes':\n        return function (a, b) {\n          return b.score - a.score;\n        };\n\n      case 'Views':\n        return function (a, b) {\n          return b.views - a.views;\n        };\n\n      case 'Newest':\n        return function (a, b) {\n          return new Date(b.created) - new Date(a.created);\n        };\n\n      case 'Oldest':\n        return function (a, b) {\n          return new Date(a.created) - new Date(b.created);\n        };\n\n      default:\n        break;\n    }\n  };\n\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, router.query.tag ? router.query.tag : 'Questions', \" - Clone of Stackoverflow\")), __jsx(ButtonGroup, {\n    borderBottom: true,\n    buttons: ['Newest', 'Oldest'],\n    selected: sortType,\n    setSelected: setSortType,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), !questions && __jsx(\"div\", {\n    className: \"loading\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, __jsx(Spinner, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  })), questions.status == ((_Approved = \"Approved\") === null || _Approved === void 0 ? void 0 : _Approved.sort(handleSorting()).map(function (_ref3) {\n    var id = _ref3.id,\n        votes = _ref3.votes,\n        answers = _ref3.answers,\n        views = _ref3.views,\n        title = _ref3.title,\n        text = _ref3.text,\n        tags = _ref3.tags,\n        author = _ref3.author,\n        created = _ref3.created;\n    return __jsx(QuestionWrapper, {\n      key: id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, !isAuthenticated() && !isAdmin() ? __jsx(QuestionStats, {\n      voteCount: votes.length,\n      answerCount: answers.length,\n      view: views,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 51\n      }\n    }) : __jsx(React.Fragment, null), __jsx(QuestionSummary, {\n      id: id,\n      title: title,\n      tags: tags,\n      author: author,\n      createdTime: created,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 15\n      }\n    }, text));\n  })));\n};\n\n_s(HomePage, \"loTX9dyEUYUIKZF5o3YfCJc5kok=\", false, function () {\n  return [useRouter];\n});\n\n_c = HomePage;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["C:/Users/HP/OneDrive/Documents/vercel1/vercel1/pages/Question/index.js"],"names":["React","useState","useEffect","useContext","Head","useRouter","publicFetch","AuthContext","Layout","QuestionWrapper","QuestionStats","QuestionSummary","PageTitle","ButtonGroup","Spinner","HomePage","router","isAuthenticated","isAdmin","questions","setQuestions","sortType","setSortType","fetchQuestion","get","data","fetchQuestionByTag","query","tag","status","handleSorting","a","b","score","views","Date","created","sort","map","id","votes","answers","title","text","tags","author","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect,useContext } from 'react'\r\nimport Head from 'next/head'\r\nimport { useRouter } from 'next/router'\r\nimport { publicFetch } from '../../util/fetcher'\r\nimport { AuthContext } from '../../store/auth'\r\n\r\nimport Layout from '../../components/layout'\r\nimport QuestionWrapper from '../../components/question/question-wrapper'\r\nimport QuestionStats from '../../components/question/question-stats'\r\nimport QuestionSummary from '../../components/question/question-summary'\r\nimport PageTitle from '../../components/page-title'\r\nimport ButtonGroup from '../../components/button-group'\r\nimport { Spinner } from '../../components/icons'\r\n\r\nconst HomePage = () => {\r\n  const router = useRouter()\r\n  const { isAuthenticated ,isAdmin} = useContext(AuthContext);\r\n\r\n  const [questions, setQuestions] = useState(null)\r\n  const [sortType, setSortType] = useState('Votes')\r\n \r\n\r\n  useEffect(() => {\r\n    const fetchQuestion = async () => {\r\n      const { data } = await publicFetch.get('/question')\r\n      setQuestions(data)\r\n    }\r\n\r\n    const fetchQuestionByTag = async () => {\r\n      const { data } = await publicFetch.get(`/questions/${router.query.tag}`)\r\n      setQuestions(data.status==\"Approved\")\r\n    }\r\n\r\n    if (router.query.tag) {\r\n      fetchQuestionByTag()\r\n    } else {\r\n      fetchQuestion()\r\n    }\r\n  }, [router.query.tag])\r\n\r\n  const handleSorting = () => {\r\n    switch (sortType) {\r\n      case 'Votes':\r\n        return (a, b) => b.score - a.score\r\n      case 'Views':\r\n        return (a, b) => b.views - a.views\r\n      case 'Newest':\r\n        return (a, b) => new Date(b.created) - new Date(a.created)\r\n      case 'Oldest':\r\n        return (a, b) => new Date(a.created) - new Date(b.created)\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Head>\r\n        <title>\r\n          {router.query.tag ? router.query.tag : 'Questions'} - Clone of\r\n          Stackoverflow\r\n        </title>\r\n      </Head>\r\n\r\n      \r\n      <ButtonGroup\r\n        borderBottom\r\n        buttons={[ 'Newest', 'Oldest']}\r\n        selected={sortType}\r\n        setSelected={setSortType}\r\n      />\r\n\r\n      {!questions && (\r\n        <div className=\"loading\">\r\n          <Spinner />\r\n        </div>\r\n      )}\r\n      {questions.status == \"Approved\"\r\n        ?.sort(handleSorting())\r\n        .map(\r\n          ({\r\n            id,\r\n            votes,\r\n            answers,\r\n            views,\r\n            title,\r\n            text,\r\n            tags,\r\n            author,\r\n            created,\r\n            \r\n          }) => (\r\n            <QuestionWrapper key={id}>\r\n              {!isAuthenticated() && !isAdmin() ? <QuestionStats\r\n                voteCount={votes.length}\r\n                answerCount={answers.length}\r\n                view={views}\r\n              /> :(<></>)}\r\n              <QuestionSummary\r\n                id={id}\r\n                title={title}\r\n                tags={tags}\r\n                author={author}\r\n                createdTime={created}\r\n                \r\n              >\r\n                {text}\r\n              </QuestionSummary>\r\n            </QuestionWrapper>\r\n          )\r\n        )}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default HomePage\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\vercel1\\\\vercel1\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { publicFetch } from '../util/fetcher';\nimport { AuthContext } from './auth';\nimport Layout from '../components/layout';\nimport QuestionWrapper from '../components/question/question-wrapper';\nimport QuestionStats from '../components/question/question-stats';\nimport QuestionSummary from '../components/question/question-summary';\nimport PageTitle from '../components/page-title';\nimport ButtonGroup from '../components/button-group';\nimport { Spinner } from '../components/icons';\n\nconst HomePage = () => {\n  const router = useRouter();\n  const {\n    isAuthenticated,\n    isAdmin\n  } = useContext(AuthContext);\n  const {\n    0: questions,\n    1: setQuestions\n  } = useState(null);\n  const {\n    0: sortType,\n    1: setSortType\n  } = useState('Votes');\n  useEffect(() => {\n    const fetchQuestion = async () => {\n      const {\n        data\n      } = await publicFetch.get('/question');\n      setQuestions(data);\n    };\n\n    const fetchQuestionByTag = async () => {\n      const {\n        data\n      } = await publicFetch.get(`/questions/${router.query.tag}`);\n      setQuestions(data);\n    };\n\n    if (router.query.tag) {\n      fetchQuestionByTag();\n    } else {\n      fetchQuestion();\n    }\n  }, [router.query.tag]);\n\n  const handleSorting = () => {\n    switch (sortType) {\n      case 'Votes':\n        return (a, b) => b.score - a.score;\n\n      case 'Views':\n        return (a, b) => b.views - a.views;\n\n      case 'Newest':\n        return (a, b) => new Date(b.created) - new Date(a.created);\n\n      case 'Oldest':\n        return (a, b) => new Date(a.created) - new Date(b.created);\n\n      default:\n        break;\n    }\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, router.query.tag ? router.query.tag : 'Questions', \" - TakeCode\")), isAuthenticated() && isAdmin() ? __jsx(PageTitle, {\n    title: router.query.tag ? `Questions tagged [${router.query.tag}]` : 'Requested Questions',\n    button: true,\n    borderBottom: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 42\n    }\n  }) : __jsx(PageTitle, {\n    title: router.query.tag ? `Questions tagged [${router.query.tag}]` : 'All Questions',\n    button: true,\n    borderBottom: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 179\n    }\n  }), __jsx(ButtonGroup, {\n    borderBottom: true,\n    buttons: ['Votes', 'Views', 'Newest', 'Oldest'],\n    selected: sortType,\n    setSelected: setSortType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), !questions && __jsx(\"div\", {\n    className: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, __jsx(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  })), questions === null || questions === void 0 ? void 0 : questions.sort(handleSorting()).map(({\n    id,\n    votes,\n    answers,\n    views,\n    title,\n    text,\n    tags,\n    author,\n    created\n  }) => __jsx(QuestionWrapper, {\n    key: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, __jsx(QuestionStats, {\n    voteCount: votes.length,\n    answerCount: answers.length,\n    view: views,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 15\n    }\n  }), __jsx(QuestionSummary, {\n    id: id,\n    title: title,\n    tags: tags,\n    author: author,\n    createdTime: created,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }, text))));\n};\n\nexport default HomePage;","map":{"version":3,"sources":["C:/Users/HP/OneDrive/Documents/vercel1/vercel1/pages/index.js"],"names":["React","useState","useEffect","Head","useRouter","publicFetch","AuthContext","Layout","QuestionWrapper","QuestionStats","QuestionSummary","PageTitle","ButtonGroup","Spinner","HomePage","router","isAuthenticated","isAdmin","useContext","questions","setQuestions","sortType","setSortType","fetchQuestion","data","get","fetchQuestionByTag","query","tag","handleSorting","a","b","score","views","Date","created","sort","map","id","votes","answers","title","text","tags","author","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Head from 'next/head'\nimport { useRouter } from 'next/router'\n\nimport { publicFetch } from '../util/fetcher'\nimport { AuthContext } from './auth'\n\nimport Layout from '../components/layout'\nimport QuestionWrapper from '../components/question/question-wrapper'\nimport QuestionStats from '../components/question/question-stats'\nimport QuestionSummary from '../components/question/question-summary'\nimport PageTitle from '../components/page-title'\nimport ButtonGroup from '../components/button-group'\nimport { Spinner } from '../components/icons'\n\nconst HomePage = () => {\n  const router = useRouter()\n  const { isAuthenticated ,isAdmin} = useContext(AuthContext);\n\n  const [questions, setQuestions] = useState(null)\n  const [sortType, setSortType] = useState('Votes')\n\n  useEffect(() => {\n    const fetchQuestion = async () => {\n      const { data } = await publicFetch.get('/question')\n      setQuestions(data)\n    }\n\n    const fetchQuestionByTag = async () => {\n      const { data } = await publicFetch.get(`/questions/${router.query.tag}`)\n      setQuestions(data)\n    }\n\n    if (router.query.tag) {\n      fetchQuestionByTag()\n    } else {\n      fetchQuestion()\n    }\n  }, [router.query.tag])\n\n  const handleSorting = () => {\n    switch (sortType) {\n      case 'Votes':\n        return (a, b) => b.score - a.score\n      case 'Views':\n        return (a, b) => b.views - a.views\n      case 'Newest':\n        return (a, b) => new Date(b.created) - new Date(a.created)\n      case 'Oldest':\n        return (a, b) => new Date(a.created) - new Date(b.created)\n      default:\n        break\n    }\n  }\n\n  return (\n    <Layout>\n      <Head>\n        <title>\n          {router.query.tag ? router.query.tag : 'Questions'} - TakeCode\n        </title>\n      </Head>\n\n      {isAuthenticated() && isAdmin() ? (<PageTitle title={router.query.tag ? `Questions tagged [${router.query.tag}]` : 'Requested Questions'} button borderBottom={false} />) : <PageTitle title={router.query.tag ? `Questions tagged [${router.query.tag}]` : 'All Questions'} button borderBottom={false} />}\n\n      <ButtonGroup\n        borderBottom\n        buttons={['Votes', 'Views', 'Newest', 'Oldest']}\n        selected={sortType}\n        setSelected={setSortType}\n      />\n\n      {!questions && (\n        <div className=\"loading\">\n          <Spinner />\n        </div>\n      )}\n\n      {questions\n        ?.sort(handleSorting())\n        .map(\n          ({\n            id,\n            votes,\n            answers,\n            views,\n            title,\n            text,\n            tags,\n            author,\n            created\n          }) => (\n            <QuestionWrapper key={id}>\n              <QuestionStats\n                voteCount={votes.length}\n                answerCount={answers.length}\n                view={views}\n              />\n              <QuestionSummary\n                id={id}\n                title={title}\n                tags={tags}\n                author={author}\n                createdTime={created}\n              >\n                {text}\n              </QuestionSummary>\n            </QuestionWrapper>\n          )\n        )}\n    </Layout>\n  )\n}\n\nexport default HomePage\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\vercel1\\\\vercel1\\\\pages\\\\tags.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport { publicFetch } from '../util/fetcher';\nimport Layout from '../components/layout';\nimport PageTitle from '../components/page-title';\nimport SearchInput from '../components/search-input';\nimport TagList from '../components/tag-list';\nimport TagItem from '../components/tag-list/tag-item';\nimport { Spinner } from '../components/icons';\n\nfunction TagsPage() {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(null),\n      searchTerm = _useState[0],\n      setSearchTerm = _useState[1];\n\n  var _useState2 = useState(null),\n      tags = _useState2[0],\n      setTags = _useState2[1];\n\n  var _useState3 = useState(false),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  useEffect(function () {\n    if (searchTerm === null) {\n      var fetchUser = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var _yield$publicFetch$ge, data;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return publicFetch.get('/tags');\n\n                case 2:\n                  _yield$publicFetch$ge = _context.sent;\n                  data = _yield$publicFetch$ge.data;\n                  setTags(data);\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function fetchUser() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      fetchUser();\n    } else {\n      var delayDebounceFn = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _yield$publicFetch$ge2, data;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                setLoading(true);\n                _context2.next = 3;\n                return publicFetch.get(searchTerm ? \"/tags/\".concat(searchTerm) : \"/tags\");\n\n              case 3:\n                _yield$publicFetch$ge2 = _context2.sent;\n                data = _yield$publicFetch$ge2.data;\n                setTags(data);\n                setLoading(false);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })), 500);\n      return function () {\n        return clearTimeout(delayDebounceFn);\n      };\n    }\n  }, [searchTerm]);\n  return __jsx(Layout, {\n    extra: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, \"Tags - Clone of Stackoverflow\")), __jsx(PageTitle, {\n    title: \"Tags\",\n    borderBottom: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, \"A tag is a keyword or label that categorizes your question with other, similar questions. Using the right tags makes it easier for others to find and answer your question.\"), __jsx(SearchInput, {\n    placeholder: \"Filter by tag name\",\n    autoFocus: true,\n    isLoading: loading,\n    autoComplete: \"off\",\n    type: \"text\",\n    onChange: function onChange(e) {\n      return setSearchTerm(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), !tags && __jsx(\"div\", {\n    className: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, __jsx(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  })), tags && __jsx(React.Fragment, null, __jsx(TagList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, tags === null || tags === void 0 ? void 0 : tags.map(function (_ref3) {\n    var count = _ref3.count,\n        _id = _ref3._id;\n    return __jsx(TagItem, {\n      key: _id,\n      count: count,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }, _id);\n  })), tags.length == 0 && __jsx(\"p\", {\n    className: \"not-found\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 32\n    }\n  }, \"No tags matched your search.\")));\n}\n\n_s(TagsPage, \"Ep05xYLYfyilvdUW5UViwrEG6dU=\");\n\n_c = TagsPage;\nexport default TagsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TagsPage\");","map":{"version":3,"sources":["C:/Users/HP/OneDrive/Documents/vercel1/vercel1/pages/tags.js"],"names":["React","useEffect","useState","Head","publicFetch","Layout","PageTitle","SearchInput","TagList","TagItem","Spinner","TagsPage","searchTerm","setSearchTerm","tags","setTags","loading","setLoading","fetchUser","get","data","delayDebounceFn","setTimeout","clearTimeout","e","target","value","map","count","_id","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Head from 'next/head'\n\nimport { publicFetch } from '../util/fetcher'\n\nimport Layout from '../components/layout'\nimport PageTitle from '../components/page-title'\nimport SearchInput from '../components/search-input'\nimport TagList from '../components/tag-list'\nimport TagItem from '../components/tag-list/tag-item'\nimport { Spinner } from '../components/icons'\n\nfunction TagsPage() {\n  const [searchTerm, setSearchTerm] = useState(null)\n  const [tags, setTags] = useState(null)\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    if (searchTerm === null) {\n      const fetchUser = async () => {\n        const { data } = await publicFetch.get('/tags')\n        setTags(data)\n      }\n\n      fetchUser()\n    } else {\n      const delayDebounceFn = setTimeout(async () => {\n        setLoading(true)\n        const { data } = await publicFetch.get(\n          searchTerm ? `/tags/${searchTerm}` : `/tags`\n        )\n        setTags(data)\n        setLoading(false)\n      }, 500)\n\n      return () => clearTimeout(delayDebounceFn)\n    }\n  }, [searchTerm])\n\n  return (\n    <Layout extra={false}>\n      <Head>\n        <title>Tags - Clone of Stackoverflow</title>\n      </Head>\n\n      <PageTitle title=\"Tags\" borderBottom={false}>\n        A tag is a keyword or label that categorizes your question with other,\n        similar questions. Using the right tags makes it easier for others to\n        find and answer your question.\n      </PageTitle>\n\n      <SearchInput\n        placeholder=\"Filter by tag name\"\n        autoFocus\n        isLoading={loading}\n        autoComplete=\"off\"\n        type=\"text\"\n        onChange={(e) => setSearchTerm(e.target.value)}\n      />\n\n      {!tags && (\n        <div className=\"loading\">\n          <Spinner />\n        </div>\n      )}\n\n      {tags && (\n        <>\n          <TagList>\n            {tags?.map(({ count, _id }) => (\n              <TagItem key={_id} count={count}>\n                {_id}\n              </TagItem>\n            ))}\n          </TagList>\n\n          {tags.length == 0 && <p className=\"not-found\">No tags matched your search.</p>}\n        </>\n      )}\n    </Layout>\n  )\n}\n\nexport default TagsPage\n"]},"metadata":{},"sourceType":"module"}
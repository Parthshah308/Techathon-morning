{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\takecode_vercel-master\\\\takecode_vercel-master\\\\components\\\\post\\\\add-comment\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { FetchContext } from '../../../store/fetch';\nimport TextArea from '../../textarea';\nimport Button from '../../button';\nimport styles from './add-comment.module.css';\n\nvar AddComment = function AddComment(_ref) {\n  _s();\n\n  var questionId = _ref.questionId,\n      answerId = _ref.answerId,\n      setShowAddComment = _ref.setShowAddComment,\n      setQuestion = _ref.setQuestion;\n\n  var _useContext = useContext(FetchContext),\n      authAxios = _useContext.authAxios;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  return __jsx(Formik, {\n    initialValues: {\n      comment: ''\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n        var setStatus, resetForm, _yield$authAxios$post, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setStatus = _ref2.setStatus, resetForm = _ref2.resetForm;\n                setLoading(true);\n                _context.prev = 2;\n                _context.next = 5;\n                return authAxios.post(\"/comment/\".concat(questionId, \"/\").concat(answerId ? answerId : ''), values);\n\n              case 5:\n                _yield$authAxios$post = _context.sent;\n                data = _yield$authAxios$post.data;\n                setQuestion(data);\n                resetForm({});\n                setShowAddComment(false);\n                _context.next = 15;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](2);\n                setStatus(_context.t0.response.data.message);\n\n              case 15:\n                setLoading(false);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 12]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    validationSchema: Yup.object({\n      comment: Yup.string().required('Comment is missing.').min(5, 'Comment must be at least 5 characters.').max(1000, 'Comment cannot be longer than 1000 characters.')\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, function (_ref4) {\n    var values = _ref4.values,\n        errors = _ref4.errors,\n        touched = _ref4.touched,\n        status = _ref4.status,\n        handleChange = _ref4.handleChange,\n        handleBlur = _ref4.handleBlur,\n        handleSubmit = _ref4.handleSubmit,\n        isSubmitting = _ref4.isSubmitting;\n    return __jsx(\"form\", {\n      className: styles.container,\n      onSubmit: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, __jsx(TextArea, {\n      name: \"comment\",\n      autoComplete: \"off\",\n      value: values.comment,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      hasError: touched.comment && errors.comment,\n      errorMessage: errors.comment && errors.comment,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }), __jsx(\"p\", {\n      className: styles.status,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }, status), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, __jsx(Button, {\n      className: styles.button,\n      type: \"submit\",\n      primary: true,\n      isLoading: loading,\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, \"Add Comment\")));\n  });\n};\n\n_s(AddComment, \"1EvD7D3sqBnkuKaiT/ERI4p3Aio=\");\n\n_c = AddComment;\nexport default AddComment;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddComment\");","map":{"version":3,"sources":["C:/Users/HP/OneDrive/Documents/takecode_vercel-master/takecode_vercel-master/components/post/add-comment/index.js"],"names":["React","useState","useContext","Formik","Yup","FetchContext","TextArea","Button","styles","AddComment","questionId","answerId","setShowAddComment","setQuestion","authAxios","loading","setLoading","comment","values","setStatus","resetForm","post","data","response","message","object","string","required","min","max","errors","touched","status","handleChange","handleBlur","handleSubmit","isSubmitting","container","button"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\nimport { Formik } from 'formik'\nimport * as Yup from 'yup'\n\nimport { FetchContext } from '../../../store/fetch'\n\nimport TextArea from '../../textarea'\nimport Button from '../../button'\n\nimport styles from './add-comment.module.css'\n\nconst AddComment = ({\n  questionId,\n  answerId,\n  setShowAddComment,\n  setQuestion\n}) => {\n  const { authAxios } = useContext(FetchContext)\n\n  const [loading, setLoading] = useState(false)\n\n  return (\n    <Formik\n      initialValues={{ comment: '' }}\n      onSubmit={async (values, { setStatus, resetForm }) => {\n        setLoading(true)\n        try {\n          const { data } = await authAxios.post(\n            `/comment/${questionId}/${answerId ? answerId : ''}`,\n            values\n          )\n\n          setQuestion(data)\n\n          resetForm({})\n          setShowAddComment(false)\n        } catch (error) {\n          setStatus(error.response.data.message)\n        }\n        setLoading(false)\n      }}\n      validationSchema={Yup.object({\n        comment: Yup.string()\n          .required('Comment is missing.')\n          .min(5, 'Comment must be at least 5 characters.')\n          .max(1000, 'Comment cannot be longer than 1000 characters.')\n      })}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        status,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting\n      }) => (\n        <form className={styles.container} onSubmit={handleSubmit}>\n          <TextArea\n            name=\"comment\"\n            autoComplete=\"off\"\n            value={values.comment}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            hasError={touched.comment && errors.comment}\n            errorMessage={errors.comment && errors.comment}\n          />\n          <p className={styles.status}>{status}</p>\n          <div>\n            <Button\n              className={styles.button}\n              type=\"submit\"\n              primary\n              isLoading={loading}\n              disabled={isSubmitting}\n            >\n              Add Comment\n            </Button>\n          </div>\n        </form>\n      )}\n    </Formik>\n  )\n}\n\nexport default AddComment\n"]},"metadata":{},"sourceType":"module"}
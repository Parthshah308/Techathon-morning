{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\takecode_vercel-master\\\\takecode_vercel-master\\\\components\\\\question-ask-view\\\\question-form\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport ReactQuill from \"react-quill\";\nimport { FetchContext } from '../../../store/fetch';\nimport Button from '../../button';\nimport Textarea from '../../textarea';\nimport FormInput from '../../form-input';\nimport TagInput from '../../tag-input'; // import \"react-quill/dist/quill.snow.css\";\n// import \"react-quill/dist/quill.bubble.css\";\n\nimport styles from './question-form.module.css';\n\nconst QuestionForm = () => {\n  const handleBody = e => {\n    console.log(e);\n    setBody(e);\n  };\n\n  const router = useRouter();\n  const {\n    authAxios\n  } = useContext(FetchContext);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  return __jsx(Formik, {\n    initialValues: {\n      title: '',\n      text: '',\n      tags: []\n    },\n    onSubmit: async (values, {\n      setStatus,\n      resetForm\n    }) => {\n      setLoading(true);\n\n      try {\n        await authAxios.post('questions', values);\n        resetForm({});\n        router.push('/');\n      } catch (error) {\n        setStatus(error.response.data.message);\n      }\n\n      setLoading(false);\n    },\n    validationSchema: Yup.object({\n      title: Yup.string().required('Title is missing.').max(150, 'Title cannot be longer than 150 characters.').min(15, 'Title must be at least 15 characters.'),\n      text: Yup.string().required('Body is missing.').min(30, 'Body must be at least 30 characters.').max(30000, 'Body cannot be longer than 30000 characters.'),\n      tags: Yup.array().required('Please enter at least one tag.').max(5, 'Please enter no more than 5 tags.').of(Yup.string().max(15, 'Tag cannot be longer than 15 characters. '))\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, ({\n    values,\n    errors,\n    touched,\n    status,\n    handleChange,\n    setFieldValue,\n    handleBlur,\n    handleSubmit,\n    isSubmitting\n  }) => __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, __jsx(FormInput, {\n    label: \"Title\",\n    inputInfo: \"Be specific and imagine you\\u2019re asking a question to another person\",\n    type: \"text\",\n    name: \"title\",\n    autoComplete: \"off\",\n    value: values.title,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    hasError: touched.title && errors.title,\n    errorMessage: errors.title && errors.title,\n    placeholder: \"e.g Is there an R function for finding the index of an element in a vendor?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }), __jsx(ReactQuill, {\n    placeholder: \"spread your message...\",\n    modules: QuestionForm.modules,\n    formats: QuestionForm.formats,\n    onChange: handleBody,\n    value: body,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }), __jsx(TagInput, {\n    label: \"Tags\",\n    inputInfo: \"Add up to 5 tags to describe what your question is about\",\n    type: \"text\",\n    name: \"tags\",\n    value: values.tags,\n    onChange: e => setFieldValue('tags', e, true),\n    onBlur: handleBlur,\n    hasError: touched.tags && errors.tags,\n    errorMessage: errors.tags && errors.tags,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    className: styles.buttonContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, __jsx(\"p\", {\n    className: styles.status,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, status), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    type: \"submit\",\n    primary: true,\n    isLoading: loading,\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  }, \"Review your question\")))));\n};\n\nQuestionForm.modules = {\n  toolbar: [[{\n    'font': []\n  }], [{\n    'size': ['small', false, 'large', 'huge']\n  }], ['bold', 'italic', 'underline'], [{\n    'list': 'ordered'\n  }, {\n    'list': 'bullet'\n  }], [{\n    'align': []\n  }], [{\n    'color': []\n  }, {\n    'background': []\n  }], ['link', 'image'], ['code-block'], ['clean']]\n};\nQuestionForm.formats = ['font', 'size', 'bold', 'italic', 'underline', 'list', 'bullet', 'align', 'color', 'background', 'code-block'];\nexport default QuestionForm;","map":{"version":3,"sources":["C:/Users/HP/OneDrive/Documents/takecode_vercel-master/takecode_vercel-master/components/question-ask-view/question-form/index.js"],"names":["React","useState","useContext","useRouter","Formik","Yup","ReactQuill","FetchContext","Button","Textarea","FormInput","TagInput","styles","QuestionForm","handleBody","e","console","log","setBody","router","authAxios","loading","setLoading","title","text","tags","values","setStatus","resetForm","post","push","error","response","data","message","object","string","required","max","min","array","of","errors","touched","status","handleChange","setFieldValue","handleBlur","handleSubmit","isSubmitting","container","modules","formats","body","buttonContainer","toolbar"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\nimport { useRouter } from 'next/router'\nimport { Formik } from 'formik'\nimport * as Yup from 'yup'\nimport ReactQuill from \"react-quill\";\nimport { FetchContext } from '../../../store/fetch'\n\nimport Button from '../../button'\nimport Textarea from '../../textarea'\nimport FormInput from '../../form-input'\nimport TagInput from '../../tag-input'\n// import \"react-quill/dist/quill.snow.css\";\n// import \"react-quill/dist/quill.bubble.css\";\nimport styles from './question-form.module.css'\n\nconst QuestionForm = () => {\n\n  const handleBody = (e) => {\n    console.log(e)\n    setBody(e)\n}\n\n  const router = useRouter()\n  const { authAxios } = useContext(FetchContext)\n\n  const [loading, setLoading] = useState(false)\n\n  return (\n    <Formik\n      initialValues={{ title: '', text: '', tags: [] }}\n      onSubmit={async (values, { setStatus, resetForm }) => {\n        setLoading(true)\n        try {\n          await authAxios.post('questions', values)\n          resetForm({})\n          router.push('/')\n        } catch (error) {\n          setStatus(error.response.data.message)\n        }\n        setLoading(false)\n      }}\n      validationSchema={Yup.object({\n        title: Yup.string()\n          .required('Title is missing.')\n          .max(150, 'Title cannot be longer than 150 characters.')\n          .min(15, 'Title must be at least 15 characters.'),\n        text: Yup.string()\n          .required('Body is missing.')\n          .min(30, 'Body must be at least 30 characters.')\n          .max(30000, 'Body cannot be longer than 30000 characters.'),\n        tags: Yup.array()\n          .required('Please enter at least one tag.')\n          .max(5, 'Please enter no more than 5 tags.')\n          .of(Yup.string().max(15, 'Tag cannot be longer than 15 characters. '))\n      })}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        status,\n        handleChange,\n        setFieldValue,\n        handleBlur,\n        handleSubmit,\n        isSubmitting\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <div className={styles.container}>\n            <FormInput\n              label=\"Title\"\n              inputInfo=\"Be specific and imagine you’re asking a question to another person\"\n              type=\"text\"\n              name=\"title\"\n              autoComplete=\"off\"\n              value={values.title}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              hasError={touched.title && errors.title}\n              errorMessage={errors.title && errors.title}\n              placeholder=\"e.g Is there an R function for finding the index of an element in a vendor?\"\n            />\n          <ReactQuill\n                        placeholder='spread your message...'\n                        modules={QuestionForm.modules}\n                        formats={QuestionForm.formats}\n                        onChange={handleBody}\n                        value={body}\n                    />\n            <TagInput\n              label=\"Tags\"\n              inputInfo=\"Add up to 5 tags to describe what your question is about\"\n              type=\"text\"\n              name=\"tags\"\n              value={values.tags}\n              onChange={(e) => setFieldValue('tags', e, true)}\n              onBlur={handleBlur}\n              hasError={touched.tags && errors.tags}\n              errorMessage={errors.tags && errors.tags}\n            />\n          </div>\n          <div className={styles.buttonContainer}>\n            <p className={styles.status}>{status}</p>\n            <div>\n              <Button\n                type=\"submit\"\n                primary\n                isLoading={loading}\n                disabled={isSubmitting}\n              >\n                Review your question\n              </Button>\n            </div>\n          </div>\n        </form>\n      )}\n    </Formik>\n  )\n}\n\nQuestionForm.modules = {\n  toolbar: [\n    [{ 'font': [] }],\n    [{ 'size': ['small', false, 'large', 'huge'] }],\n    ['bold', 'italic', 'underline'],\n    [{'list': 'ordered'}, {'list': 'bullet'}],\n    [{ 'align': [] }],\n    [{ 'color': [] }, { 'background': [] }],\n    ['link', 'image'],\n    ['code-block'],\n    ['clean']\n  ]\n};\n\nQuestionForm.formats = [\n  'font',\n  'size',\n  'bold', 'italic', 'underline',\n  'list', 'bullet',\n  'align',\n  'color', 'background',\n   \n  'code-block'\n];\n\nexport default QuestionForm\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { useState, useEffect, useRef } from 'react';\n\nfunction useComponentVisible(initialIsVisible) {\n  const {\n    0: isComponentVisible,\n    1: setIsComponentVisible\n  } = useState(initialIsVisible);\n  const ref = useRef(null);\n  const toggleRef = useRef(null);\n\n  const handleHide = event => {\n    if (event.key === 'Escape') {\n      setIsComponentVisible(false);\n    }\n  };\n\n  const handleClickOutside = event => {\n    var _toggleRef$current;\n\n    if (ref.current && !ref.current.contains(event.target) && !(toggleRef === null || toggleRef === void 0 ? void 0 : (_toggleRef$current = toggleRef.current) === null || _toggleRef$current === void 0 ? void 0 : _toggleRef$current.contains(event.target))) {\n      setIsComponentVisible(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside, true);\n    document.addEventListener('keydown', handleHide, true);\n    return () => {\n      document.removeEventListener('keydown', handleHide, true);\n      document.removeEventListener('click', handleClickOutside, true);\n    };\n  });\n  return {\n    ref,\n    toggleRef,\n    isComponentVisible,\n    setIsComponentVisible\n  };\n}\n\nexport default useComponentVisible;","map":{"version":3,"sources":["C:/vercel/hooks/useComponentVisible.js"],"names":["useState","useEffect","useRef","useComponentVisible","initialIsVisible","isComponentVisible","setIsComponentVisible","ref","toggleRef","handleHide","event","key","handleClickOutside","current","contains","target","document","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;;AAEA,SAASC,mBAAT,CAA6BC,gBAA7B,EAA+C;AAC7C,QAAM;AAAA,OAACC,kBAAD;AAAA,OAAqBC;AAArB,MAA8CN,QAAQ,CAACI,gBAAD,CAA5D;AACA,QAAMG,GAAG,GAAGL,MAAM,CAAC,IAAD,CAAlB;AACA,QAAMM,SAAS,GAAGN,MAAM,CAAC,IAAD,CAAxB;;AAEA,QAAMO,UAAU,GAAIC,KAAD,IAAW;AAC5B,QAAIA,KAAK,CAACC,GAAN,KAAc,QAAlB,EAA4B;AAC1BL,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD;AACF,GAJD;;AAMA,QAAMM,kBAAkB,GAAIF,KAAD,IAAW;AAAA;;AACpC,QACEH,GAAG,CAACM,OAAJ,IACA,CAACN,GAAG,CAACM,OAAJ,CAAYC,QAAZ,CAAqBJ,KAAK,CAACK,MAA3B,CADD,IAEA,EAACP,SAAD,aAACA,SAAD,6CAACA,SAAS,CAAEK,OAAZ,uDAAC,mBAAoBC,QAApB,CAA6BJ,KAAK,CAACK,MAAnC,CAAD,CAHF,EAIE;AACAT,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD;AACF,GARD;;AAUAL,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCL,kBAAnC,EAAuD,IAAvD;AACAI,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCR,UAArC,EAAiD,IAAjD;AACA,WAAO,MAAM;AACXO,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,SAA7B,EAAwCT,UAAxC,EAAoD,IAApD;AACAO,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsCN,kBAAtC,EAA0D,IAA1D;AACD,KAHD;AAID,GAPQ,CAAT;AASA,SAAO;AAAEL,IAAAA,GAAF;AAAOC,IAAAA,SAAP;AAAkBH,IAAAA,kBAAlB;AAAsCC,IAAAA;AAAtC,GAAP;AACD;;AAED,eAAeH,mBAAf","sourcesContent":["import { useState, useEffect, useRef } from 'react'\n\nfunction useComponentVisible(initialIsVisible) {\n  const [isComponentVisible, setIsComponentVisible] = useState(initialIsVisible)\n  const ref = useRef(null)\n  const toggleRef = useRef(null)\n\n  const handleHide = (event) => {\n    if (event.key === 'Escape') {\n      setIsComponentVisible(false)\n    }\n  }\n\n  const handleClickOutside = (event) => {\n    if (\n      ref.current &&\n      !ref.current.contains(event.target) &&\n      !toggleRef?.current?.contains(event.target)\n    ) {\n      setIsComponentVisible(false)\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside, true)\n    document.addEventListener('keydown', handleHide, true)\n    return () => {\n      document.removeEventListener('keydown', handleHide, true)\n      document.removeEventListener('click', handleClickOutside, true)\n    }\n  })\n\n  return { ref, toggleRef, isComponentVisible, setIsComponentVisible }\n}\n\nexport default useComponentVisible\n"]},"metadata":{},"sourceType":"module"}
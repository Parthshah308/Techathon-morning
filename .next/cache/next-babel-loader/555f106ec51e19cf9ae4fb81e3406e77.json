{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\takecode_vercel-master\\\\takecode_vercel-master\\\\components\\\\auth-forms\\\\signup-form\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { publicFetch } from '../../../util/fetcher';\nimport { AuthContext } from '../../../store/auth';\nimport ModalContext from '../../../store/modal';\nimport FormInput from '../../form-input';\nimport Button from '../../button';\nimport styles from './signup-form.module.css';\n\nconst SignupForm = () => {\n  const {\n    setAuthState\n  } = useContext(AuthContext);\n  const {\n    setIsComponentVisible\n  } = useContext(ModalContext);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  return __jsx(Formik, {\n    initialValues: {\n      username: '',\n      password: '',\n      passwordConfirmation: ''\n    },\n    onSubmit: async (values, {\n      setStatus,\n      resetForm\n    }) => {\n      setLoading(true);\n\n      try {\n        const {\n          data\n        } = await publicFetch.post('signup', values);\n        const {\n          token,\n          expiresAt,\n          userInfo\n        } = data;\n        setAuthState({\n          token,\n          expiresAt,\n          userInfo\n        });\n        resetForm({});\n        setIsComponentVisible(false);\n      } catch (error) {\n        setStatus(error.response.data.message);\n      }\n\n      setLoading(false);\n    },\n    validationSchema: Yup.object({\n      username: Yup.string().required('Required').max(16, 'Must be at most 16 characters long').matches(/^[a-zA-Z0-9_-]+$/, 'Contains invalid characters'),\n      password: Yup.string().required('Required').min(6, 'Must be at least 6 characters long').max(50, 'Must be at most 50 characters long'),\n      passwordConfirmation: Yup.string().oneOf([Yup.ref('password'), null], 'Passwords must match')\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, ({\n    values,\n    errors,\n    touched,\n    status,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting\n  }) => __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    className: styles.form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, __jsx(FormInput, {\n    label: \"Username\",\n    type: \"text\",\n    name: \"username\",\n    autoComplete: \"off\",\n    value: values.username,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    hasError: touched.username && errors.username,\n    errorMessage: errors.username && errors.username,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }), __jsx(FormInput, {\n    label: \"email\",\n    type: \"email\",\n    name: \"email\",\n    autoComplete: \"off\",\n    value: values.username,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    hasError: touched.username && errors.username,\n    errorMessage: errors.username && errors.username,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 14\n    }\n  }), __jsx(FormInput, {\n    label: \"Password\",\n    type: \"password\",\n    name: \"password\",\n    autoComplete: \"off\",\n    value: values.password,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    hasError: touched.password && errors.password,\n    errorMessage: errors.password && errors.password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }), __jsx(FormInput, {\n    label: \"Password Confirm\",\n    type: \"password\",\n    name: \"passwordConfirmation\",\n    autoComplete: \"off\",\n    value: values.passwordConfirmation,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    hasError: touched.passwordConfirmation && errors.passwordConfirmation,\n    errorMessage: errors.passwordConfirmation && errors.passwordConfirmation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }), __jsx(\"p\", {\n    className: styles.status,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, status), __jsx(Button, {\n    primary: true,\n    full: true,\n    className: styles.submitButton,\n    disabled: isSubmitting,\n    isLoading: loading,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, \"Sign up\")));\n};\n\nexport default SignupForm;","map":{"version":3,"sources":["C:/Users/HP/OneDrive/Documents/takecode_vercel-master/takecode_vercel-master/components/auth-forms/signup-form/index.js"],"names":["React","useState","useContext","Formik","Yup","publicFetch","AuthContext","ModalContext","FormInput","Button","styles","SignupForm","setAuthState","setIsComponentVisible","loading","setLoading","username","password","passwordConfirmation","values","setStatus","resetForm","data","post","token","expiresAt","userInfo","error","response","message","object","string","required","max","matches","min","oneOf","ref","errors","touched","status","handleChange","handleBlur","handleSubmit","isSubmitting","form","submitButton"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\nimport { Formik } from 'formik'\nimport * as Yup from 'yup'\n\nimport { publicFetch } from '../../../util/fetcher'\nimport { AuthContext } from '../../../store/auth'\nimport ModalContext from '../../../store/modal'\n\nimport FormInput from '../../form-input'\nimport Button from '../../button'\n\nimport styles from './signup-form.module.css'\n\nconst SignupForm = () => {\n  const { setAuthState } = useContext(AuthContext)\n  const { setIsComponentVisible } = useContext(ModalContext)\n\n  const [loading, setLoading] = useState(false)\n\n  return (\n    <Formik\n      initialValues={{ username: '', password: '', passwordConfirmation: '' }}\n      onSubmit={async (values, { setStatus, resetForm }) => {\n        setLoading(true)\n        try {\n          const { data } = await publicFetch.post('signup', values)\n          const { token, expiresAt, userInfo } = data\n          setAuthState({ token, expiresAt, userInfo })\n          resetForm({})\n          setIsComponentVisible(false)\n        } catch (error) {\n          setStatus(error.response.data.message)\n        }\n        setLoading(false)\n      }}\n      validationSchema={Yup.object({\n        username: Yup.string()\n          .required('Required')\n          .max(16, 'Must be at most 16 characters long')\n          .matches(/^[a-zA-Z0-9_-]+$/, 'Contains invalid characters'),\n        password: Yup.string()\n          .required('Required')\n          .min(6, 'Must be at least 6 characters long')\n          .max(50, 'Must be at most 50 characters long'),\n        passwordConfirmation: Yup.string().oneOf(\n          [Yup.ref('password'), null],\n          'Passwords must match'\n        )\n      })}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        status,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting\n      }) => (\n        <form onSubmit={handleSubmit} className={styles.form}>\n          <FormInput\n            label=\"Username\"\n            type=\"text\"\n            name=\"username\"\n            autoComplete=\"off\"\n            value={values.username}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            hasError={touched.username && errors.username}\n            errorMessage={errors.username && errors.username}\n          />\n             <FormInput\n            label=\"email\"\n            type=\"email\"\n            name=\"email\"\n            autoComplete=\"off\"\n            value={values.username}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            hasError={touched.username && errors.username}\n            errorMessage={errors.username && errors.username}\n          />\n          <FormInput\n            label=\"Password\"\n            type=\"password\"\n            name=\"password\"\n            autoComplete=\"off\"\n            value={values.password}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            hasError={touched.password && errors.password}\n            errorMessage={errors.password && errors.password}\n          />\n          <FormInput\n            label=\"Password Confirm\"\n            type=\"password\"\n            name=\"passwordConfirmation\"\n            autoComplete=\"off\"\n            value={values.passwordConfirmation}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            hasError={\n              touched.passwordConfirmation && errors.passwordConfirmation\n            }\n            errorMessage={\n              errors.passwordConfirmation && errors.passwordConfirmation\n            }\n          />\n          <p className={styles.status}>{status}</p>\n          <Button\n            primary\n            full\n            className={styles.submitButton}\n            disabled={isSubmitting}\n            isLoading={loading}\n            type=\"submit\"\n          >\n            Sign up\n          </Button>\n        </form>\n      )}\n    </Formik>\n  )\n}\n\nexport default SignupForm\n"]},"metadata":{},"sourceType":"module"}
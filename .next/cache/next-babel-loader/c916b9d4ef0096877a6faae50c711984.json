{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\vercel1\\\\vercel1\\\\pages\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, use } from 'react';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { publicFetch } from '../util/fetcher';\nimport { AuthContext } from '../store/auth';\nimport Layout from '../components/layout';\nimport QuestionWrapper from '../components/question/question-wrapper';\nimport QuestionStats from '../components/question/question-stats';\nimport QuestionSummary from '../components/question/question-summary';\nimport PageTitle from '../components/page-title';\nimport ButtonGroup from '../components/button-group';\nimport { Spinner } from '../components/icons';\n\nvar HomePage = function HomePage() {\n  _s();\n\n  var router = useRouter();\n\n  var _useContext = useContext(AuthContext),\n      isAuthenticated = _useContext.isAuthenticated,\n      isAdmin = _useContext.isAdmin;\n\n  var _useState = useState(null),\n      questions = _useState[0],\n      setQuestions = _useState[1];\n\n  var _useState2 = useState('Votes'),\n      sortType = _useState2[0],\n      setSortType = _useState2[1];\n\n  useEffect(function () {\n    var fetchQuestion = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$publicFetch$ge, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return publicFetch.get('/question');\n\n              case 2:\n                _yield$publicFetch$ge = _context.sent;\n                data = _yield$publicFetch$ge.data;\n                setQuestions(data);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchQuestion() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    var fetchQuestionByTag = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _yield$publicFetch$ge2, data;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return publicFetch.get(\"/questions/\".concat(router.query.tag));\n\n              case 2:\n                _yield$publicFetch$ge2 = _context2.sent;\n                data = _yield$publicFetch$ge2.data;\n                setQuestions(data);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function fetchQuestionByTag() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    if (router.query.tag) {\n      fetchQuestionByTag();\n    } else {\n      fetchQuestion();\n    }\n  }, [router.query.tag]);\n\n  var handleSorting = function handleSorting() {\n    switch (sortType) {\n      case 'Votes':\n        return function (a, b) {\n          return b.score - a.score;\n        };\n\n      case 'Views':\n        return function (a, b) {\n          return b.views - a.views;\n        };\n\n      case 'Newest':\n        return function (a, b) {\n          return new Date(b.created) - new Date(a.created);\n        };\n\n      case 'Oldest':\n        return function (a, b) {\n          return new Date(a.created) - new Date(b.created);\n        };\n\n      default:\n        break;\n    }\n  };\n\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, router.query.tag ? router.query.tag : 'Questions', \" - TakeCode\")), isAuthenticated() && isAdmin() ? __jsx(PageTitle, {\n    title: router.query.tag ? \"Questions tagged [\".concat(router.query.tag, \"]\") : 'Requested Questions',\n    button: true,\n    borderBottom: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 42\n    }\n  }) : __jsx(PageTitle, {\n    title: router.query.tag ? \"Questions tagged [\".concat(router.query.tag, \"]\") : 'All Questions',\n    button: true,\n    borderBottom: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 179\n    }\n  }), __jsx(ButtonGroup, {\n    borderBottom: true,\n    buttons: ['Votes', 'Views', 'Newest', 'Oldest'],\n    selected: sortType,\n    setSelected: setSortType,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), !questions && __jsx(\"div\", {\n    className: \"loading\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, __jsx(Spinner, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  })), questions === null || questions === void 0 ? void 0 : questions.sort(handleSorting()).map(function (_ref3) {\n    var id = _ref3.id,\n        votes = _ref3.votes,\n        answers = _ref3.answers,\n        views = _ref3.views,\n        title = _ref3.title,\n        text = _ref3.text,\n        tags = _ref3.tags,\n        author = _ref3.author,\n        created = _ref3.created;\n    return __jsx(QuestionWrapper, {\n      key: id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, __jsx(QuestionStats, {\n      voteCount: votes.length,\n      answerCount: answers.length,\n      view: views,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 15\n      }\n    }), __jsx(QuestionSummary, {\n      id: id,\n      title: title,\n      tags: tags,\n      author: author,\n      createdTime: created,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 15\n      }\n    }, text));\n  }));\n};\n\n_s(HomePage, \"loTX9dyEUYUIKZF5o3YfCJc5kok=\", false, function () {\n  return [useRouter];\n});\n\n_c = HomePage;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["C:/Users/HP/OneDrive/Documents/vercel1/vercel1/pages/index.js"],"names":["React","useState","useEffect","use","Head","useRouter","publicFetch","AuthContext","Layout","QuestionWrapper","QuestionStats","QuestionSummary","PageTitle","ButtonGroup","Spinner","HomePage","router","useContext","isAuthenticated","isAdmin","questions","setQuestions","sortType","setSortType","fetchQuestion","get","data","fetchQuestionByTag","query","tag","handleSorting","a","b","score","views","Date","created","sort","map","id","votes","answers","title","text","tags","author","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect,use } from 'react'\nimport Head from 'next/head'\nimport { useRouter } from 'next/router'\n\nimport { publicFetch } from '../util/fetcher'\nimport { AuthContext } from '../store/auth'\n\nimport Layout from '../components/layout'\nimport QuestionWrapper from '../components/question/question-wrapper'\nimport QuestionStats from '../components/question/question-stats'\nimport QuestionSummary from '../components/question/question-summary'\nimport PageTitle from '../components/page-title'\nimport ButtonGroup from '../components/button-group'\nimport { Spinner } from '../components/icons'\n\nconst HomePage = () => {\n  const router = useRouter()\n  const { isAuthenticated ,isAdmin} = useContext(AuthContext);\n\n  const [questions, setQuestions] = useState(null)\n  const [sortType, setSortType] = useState('Votes')\n\n  useEffect(() => {\n    const fetchQuestion = async () => {\n      const { data } = await publicFetch.get('/question')\n      setQuestions(data)\n    }\n\n    const fetchQuestionByTag = async () => {\n      const { data } = await publicFetch.get(`/questions/${router.query.tag}`)\n      setQuestions(data)\n    }\n\n    if (router.query.tag) {\n      fetchQuestionByTag()\n    } else {\n      fetchQuestion()\n    }\n  }, [router.query.tag])\n\n  const handleSorting = () => {\n    switch (sortType) {\n      case 'Votes':\n        return (a, b) => b.score - a.score\n      case 'Views':\n        return (a, b) => b.views - a.views\n      case 'Newest':\n        return (a, b) => new Date(b.created) - new Date(a.created)\n      case 'Oldest':\n        return (a, b) => new Date(a.created) - new Date(b.created)\n      default:\n        break\n    }\n  }\n\n  return (\n    <Layout>\n      <Head>\n        <title>\n          {router.query.tag ? router.query.tag : 'Questions'} - TakeCode\n        </title>\n      </Head>\n\n      {isAuthenticated() && isAdmin() ? (<PageTitle title={router.query.tag ? `Questions tagged [${router.query.tag}]` : 'Requested Questions'} button borderBottom={false} />) : <PageTitle title={router.query.tag ? `Questions tagged [${router.query.tag}]` : 'All Questions'} button borderBottom={false} />}\n\n      <ButtonGroup\n        borderBottom\n        buttons={['Votes', 'Views', 'Newest', 'Oldest']}\n        selected={sortType}\n        setSelected={setSortType}\n      />\n\n      {!questions && (\n        <div className=\"loading\">\n          <Spinner />\n        </div>\n      )}\n\n      {questions\n        ?.sort(handleSorting())\n        .map(\n          ({\n            id,\n            votes,\n            answers,\n            views,\n            title,\n            text,\n            tags,\n            author,\n            created\n          }) => (\n            <QuestionWrapper key={id}>\n              <QuestionStats\n                voteCount={votes.length}\n                answerCount={answers.length}\n                view={views}\n              />\n              <QuestionSummary\n                id={id}\n                title={title}\n                tags={tags}\n                author={author}\n                createdTime={created}\n              >\n                {text}\n              </QuestionSummary>\n            </QuestionWrapper>\n          )\n        )}\n    </Layout>\n  )\n}\n\nexport default HomePage\n"]},"metadata":{},"sourceType":"module"}
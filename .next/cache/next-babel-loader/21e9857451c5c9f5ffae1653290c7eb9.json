{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\takecode_vercel-master\\\\takecode_vercel-master\\\\pages\\\\users\\\\[username].js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport { publicFetch } from '../../util/fetcher';\nimport Layout from '../../components/layout';\nimport UserCard from '../../components/user-card';\nimport AvatarCard from '../../components/user-card/avatar-card';\nimport PostList from '../../components/user-card/post-list';\nimport PostItem from '../../components/user-card/post-list/post-item';\nimport { Spinner } from '../../components/icons';\n\nvar UserDetail = function UserDetail(_ref) {\n  _s();\n\n  var username = _ref.username;\n\n  var _useState = useState(null),\n      posts = _useState[0],\n      setPosts = _useState[1];\n\n  var _useState2 = useState('Questions'),\n      postType = _useState2[0],\n      setPostType = _useState2[1];\n\n  useEffect(function () {\n    var fetchQuestions = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$publicFetch$ge, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return publicFetch.get(\"/question/user/\".concat(username));\n\n              case 2:\n                _yield$publicFetch$ge = _context.sent;\n                data = _yield$publicFetch$ge.data;\n                setPosts(data);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchQuestions() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    fetchQuestions();\n  }, [postType, username]);\n  return __jsx(Layout, {\n    extra: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, \"Users \", username, \" - Clone of Stackoverflow\")), __jsx(UserCard, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, __jsx(AvatarCard, {\n    username: username,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }), __jsx(PostList, {\n    postType: postType,\n    setPostType: setPostType,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, !posts && __jsx(\"div\", {\n    className: \"loading\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, __jsx(Spinner, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 15\n    }\n  })), posts === null || posts === void 0 ? void 0 : posts.map(function (_ref3) {\n    var id = _ref3.id,\n        title = _ref3.title,\n        score = _ref3.score,\n        created = _ref3.created;\n    return __jsx(PostItem, {\n      key: id,\n      title: title,\n      vote: score,\n      created: created,\n      id: id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    });\n  }), (posts === null || posts === void 0 ? void 0 : posts.length) == 0 && __jsx(\"p\", {\n    className: \"not-found-questions\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, \"Don't have any questions yet.\"))));\n};\n\n_s(UserDetail, \"bF9lVSNmkrGLYtH59bdrJM3EesQ=\");\n\n_c = UserDetail;\nexport var __N_SSP = true;\nexport default UserDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserDetail\");","map":{"version":3,"sources":["C:/Users/HP/OneDrive/Documents/takecode_vercel-master/takecode_vercel-master/pages/users/[username].js"],"names":["React","useEffect","useState","Head","publicFetch","Layout","UserCard","AvatarCard","PostList","PostItem","Spinner","UserDetail","username","posts","setPosts","postType","setPostType","fetchQuestions","get","data","map","id","title","score","created","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Head from 'next/head'\n\nimport { publicFetch } from '../../util/fetcher'\n\nimport Layout from '../../components/layout'\nimport UserCard from '../../components/user-card'\nimport AvatarCard from '../../components/user-card/avatar-card'\nimport PostList from '../../components/user-card/post-list'\nimport PostItem from '../../components/user-card/post-list/post-item'\nimport { Spinner } from '../../components/icons'\n\nconst UserDetail = ({ username }) => {\n  const [posts, setPosts] = useState(null)\n  const [postType, setPostType] = useState('Questions')\n\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      const { data } = await publicFetch.get(`/question/user/${username}`)\n      setPosts(data)\n    }\n    fetchQuestions()\n  }, [postType, username])\n\n  return (\n    <Layout extra={false}>\n      <Head>\n        <title>Users {username} - Clone of Stackoverflow</title>\n      </Head>\n\n      <UserCard>\n        <AvatarCard username={username} />\n        <PostList postType={postType} setPostType={setPostType}>\n          {!posts && (\n            <div className=\"loading\">\n              <Spinner />\n            </div>\n          )}\n\n          {posts?.map(({ id, title, score, created }) => (\n            <PostItem\n              key={id}\n              title={title}\n              vote={score}\n              created={created}\n              id={id}\n            />\n          ))}\n\n          {posts?.length == 0 && (\n            <p className=\"not-found-questions\">\n              Don&apos;t have any questions yet.\n            </p>\n          )}\n        </PostList>\n      </UserCard>\n    </Layout>\n  )\n}\n\nexport async function getServerSideProps(context) {\n  const username = context.params.username\n  return {\n    props: {\n      username\n    }\n  }\n}\n\nexport default UserDetail\n"]},"metadata":{},"sourceType":"module"}
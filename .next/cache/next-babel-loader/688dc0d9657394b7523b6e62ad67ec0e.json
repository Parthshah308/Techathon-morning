{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\vercel1\\\\vercel1\\\\pages\\\\Question\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { publicFetch } from '../../util/fetcher';\nimport { AuthContext } from '../../../store/auth';\nimport Layout from '../../components/layout';\nimport QuestionWrapper from '../../components/question/question-wrapper';\nimport QuestionStats from '../../components/question/question-stats';\nimport QuestionSummary from '../../components/question/question-summary';\nimport PageTitle from '../../components/page-title';\nimport ButtonGroup from '../../components/button-group';\nimport { Spinner } from '../../components/icons';\n\nconst HomePage = () => {\n  const router = useRouter();\n  const {\n    0: questions,\n    1: setQuestions\n  } = useState(null);\n  const {\n    0: sortType,\n    1: setSortType\n  } = useState('Votes');\n  useEffect(() => {\n    const fetchQuestion = async () => {\n      const {\n        data\n      } = await publicFetch.get('/question');\n      setQuestions(data);\n    };\n\n    const fetchQuestionByTag = async () => {\n      const {\n        data\n      } = await publicFetch.get(`/questions/${router.query.tag}`);\n      setQuestions(data);\n    };\n\n    if (router.query.tag) {\n      fetchQuestionByTag();\n    } else {\n      fetchQuestion();\n    }\n  }, [router.query.tag]);\n\n  const handleSorting = () => {\n    switch (sortType) {\n      case 'Votes':\n        return (a, b) => b.score - a.score;\n\n      case 'Views':\n        return (a, b) => b.views - a.views;\n\n      case 'Newest':\n        return (a, b) => new Date(b.created) - new Date(a.created);\n\n      case 'Oldest':\n        return (a, b) => new Date(a.created) - new Date(b.created);\n\n      default:\n        break;\n    }\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, router.query.tag ? router.query.tag : 'Questions', \" - Clone of Stackoverflow\")), __jsx(ButtonGroup, {\n    borderBottom: true,\n    buttons: ['Newest', 'Oldest'],\n    selected: sortType,\n    setSelected: setSortType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), !questions && __jsx(\"div\", {\n    className: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, __jsx(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  })), questions === null || questions === void 0 ? void 0 : questions.sort(handleSorting()).map(({\n    id,\n    votes,\n    answers,\n    views,\n    title,\n    text,\n    tags,\n    author,\n    created\n  }) => __jsx(QuestionWrapper, {\n    key: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, !isAuthenticated() && !isAdmin() ? __jsx(QuestionStats, {\n    voteCount: votes.length,\n    answerCount: answers.length,\n    view: views,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 51\n    }\n  }) : __jsx(React.Fragment, null), __jsx(QuestionSummary, {\n    id: id,\n    title: title,\n    tags: tags,\n    author: author,\n    createdTime: created,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, text))));\n};\n\nexport default HomePage;","map":{"version":3,"sources":["C:/Users/HP/OneDrive/Documents/vercel1/vercel1/pages/Question/index.js"],"names":["React","useState","useEffect","Head","useRouter","publicFetch","AuthContext","Layout","QuestionWrapper","QuestionStats","QuestionSummary","PageTitle","ButtonGroup","Spinner","HomePage","router","questions","setQuestions","sortType","setSortType","fetchQuestion","data","get","fetchQuestionByTag","query","tag","handleSorting","a","b","score","views","Date","created","sort","map","id","votes","answers","title","text","tags","author","isAuthenticated","isAdmin","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Head from 'next/head'\r\nimport { useRouter } from 'next/router'\r\nimport { publicFetch } from '../../util/fetcher'\r\nimport { AuthContext } from '../../../store/auth'\r\n\r\nimport Layout from '../../components/layout'\r\nimport QuestionWrapper from '../../components/question/question-wrapper'\r\nimport QuestionStats from '../../components/question/question-stats'\r\nimport QuestionSummary from '../../components/question/question-summary'\r\nimport PageTitle from '../../components/page-title'\r\nimport ButtonGroup from '../../components/button-group'\r\nimport { Spinner } from '../../components/icons'\r\n\r\nconst HomePage = () => {\r\n  const router = useRouter()\r\n\r\n  const [questions, setQuestions] = useState(null)\r\n  const [sortType, setSortType] = useState('Votes')\r\n\r\n  useEffect(() => {\r\n    const fetchQuestion = async () => {\r\n      const { data } = await publicFetch.get('/question')\r\n      setQuestions(data)\r\n    }\r\n\r\n    const fetchQuestionByTag = async () => {\r\n      const { data } = await publicFetch.get(`/questions/${router.query.tag}`)\r\n      setQuestions(data)\r\n    }\r\n\r\n    if (router.query.tag) {\r\n      fetchQuestionByTag()\r\n    } else {\r\n      fetchQuestion()\r\n    }\r\n  }, [router.query.tag])\r\n\r\n  const handleSorting = () => {\r\n    switch (sortType) {\r\n      case 'Votes':\r\n        return (a, b) => b.score - a.score\r\n      case 'Views':\r\n        return (a, b) => b.views - a.views\r\n      case 'Newest':\r\n        return (a, b) => new Date(b.created) - new Date(a.created)\r\n      case 'Oldest':\r\n        return (a, b) => new Date(a.created) - new Date(b.created)\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Head>\r\n        <title>\r\n          {router.query.tag ? router.query.tag : 'Questions'} - Clone of\r\n          Stackoverflow\r\n        </title>\r\n      </Head>\r\n\r\n      \r\n      <ButtonGroup\r\n        borderBottom\r\n        buttons={[ 'Newest', 'Oldest']}\r\n        selected={sortType}\r\n        setSelected={setSortType}\r\n      />\r\n\r\n      {!questions && (\r\n        <div className=\"loading\">\r\n          <Spinner />\r\n        </div>\r\n      )}\r\n\r\n      {questions\r\n        ?.sort(handleSorting())\r\n        .map(\r\n          ({\r\n            id,\r\n            votes,\r\n            answers,\r\n            views,\r\n            title,\r\n            text,\r\n            tags,\r\n            author,\r\n            created\r\n          }) => (\r\n            <QuestionWrapper key={id}>\r\n              {!isAuthenticated() && !isAdmin() ? <QuestionStats\r\n                voteCount={votes.length}\r\n                answerCount={answers.length}\r\n                view={views}\r\n              /> :(<></>)}\r\n              <QuestionSummary\r\n                id={id}\r\n                title={title}\r\n                tags={tags}\r\n                author={author}\r\n                createdTime={created}\r\n              >\r\n                {text}\r\n              </QuestionSummary>\r\n            </QuestionWrapper>\r\n          )\r\n        )}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default HomePage\r\n"]},"metadata":{},"sourceType":"module"}